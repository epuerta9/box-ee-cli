// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ClientApiKeyScopes = "clientApiKey.Scopes"
	JwtApiKeyScopes    = "jwtApiKey.Scopes"
)

// DeviceCreatedResponse defines model for DeviceCreatedResponse.
type DeviceCreatedResponse struct {
	DeviceId   string `json:"device_id"`
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
	Msg        string `json:"msg"`
	StatusCode int    `json:"status_code"`
}

// DeviceGetResponse defines model for DeviceGetResponse.
type DeviceGetResponse struct {
	Health     string `json:"health"`
	Msg        string `json:"msg"`
	Name       string `json:"name"`
	StatusCode int    `json:"status_code"`
	Type       string `json:"type"`
}

// DeviceKeyGenResponse defines model for DeviceKeyGenResponse.
type DeviceKeyGenResponse struct {
	ClientKey  string `json:"client_key"`
	Msg        string `json:"msg"`
	StatusCode int    `json:"status_code"`
}

// DeviceObjectModel defines model for DeviceObjectModel.
type DeviceObjectModel struct {
	Health    int                    `json:"health"`
	Id        string                 `json:"id"`
	Name      string                 `json:"name"`
	Prefix    *string                `json:"prefix,omitempty"`
	Trackings *[]TrackingObjectModel `json:"trackings,omitempty"`
	Type      string                 `json:"type"`
}

// DeviceRequestAdd defines model for DeviceRequestAdd.
type DeviceRequestAdd struct {
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
}

// DeviceRequestKeyGen defines model for DeviceRequestKeyGen.
type DeviceRequestKeyGen struct {
	DeviceId *string `json:"device_id,omitempty"`
}

// DeviceRequestPatch defines model for DeviceRequestPatch.
type DeviceRequestPatch struct {
	DeviceId string `json:"device_id"`
	ToName   string `json:"to_name"`
}

// DeviceStandardResponse defines model for DeviceStandardResponse.
type DeviceStandardResponse struct {
	Msg        string `json:"msg"`
	StatusCode int    `json:"status_code"`
}

// ListDevices defines model for ListDevices.
type ListDevices struct {
	Count      int                 `json:"count"`
	Devices    []DeviceObjectModel `json:"devices"`
	Msg        string              `json:"msg"`
	StatusCode int                 `json:"status_code"`
}

// ListTrackings defines model for ListTrackings.
type ListTrackings struct {
	Count      int                   `json:"count"`
	Msg        string                `json:"msg"`
	StatusCode int                   `json:"status_code"`
	Trackings  []TrackingObjectModel `json:"trackings"`
}

// StandardResponse defines model for StandardResponse.
type StandardResponse struct {
	Msg        string `json:"msg"`
	StatusCode int    `json:"status_code"`
}

// TrackingGetResponse defines model for TrackingGetResponse.
type TrackingGetResponse struct {
	Created  string `json:"created"`
	DeviceId string `json:"device_id"`
	Id       string `json:"id"`
	Name     string `json:"name"`
	PinKey   string `json:"pin_key"`
}

// TrackingObjectModel defines model for TrackingObjectModel.
type TrackingObjectModel struct {
	DeviceId       string `json:"device_id"`
	Id             string `json:"id"`
	PinKey         string `json:"pin_key"`
	TrackingNumber string `json:"tracking_number"`
}

// TrackingRequestItem defines model for TrackingRequestItem.
type TrackingRequestItem struct {
	DeviceId       *string `json:"device_id,omitempty"`
	TrackingNumber string  `json:"tracking_number"`
}

// AdminLoginRequest defines model for adminLoginRequest.
type AdminLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AdminLoginResponseItem defines model for adminLoginResponseItem.
type AdminLoginResponseItem struct {
	Msg          string `json:"msg"`
	SessionToken string `json:"session_token"`
	StatusCode   int    `json:"status_code"`
}

// AdminRecoverRequest defines model for adminRecoverRequest.
type AdminRecoverRequest struct {
	Email string `json:"email"`
}

// AdminRegisterResponseItem defines model for adminRegisterResponseItem.
type AdminRegisterResponseItem struct {
	Msg          string  `json:"msg"`
	SessionToken *string `json:"session_token,omitempty"`
	StatusCode   int     `json:"status_code"`
}

// BoxeeClientValidateResponse defines model for boxeeClientValidateResponse.
type BoxeeClientValidateResponse struct {
	Msg        string `json:"msg"`
	StatusCode int    `json:"status_code"`
	Valid      bool   `json:"valid"`
}

// ClientValidateParams defines parameters for ClientValidate.
type ClientValidateParams struct {
	// pin key that is needed to be validated
	Pinkey string `form:"pinkey" json:"pinkey"`
}

// DeleteDeviceParams defines parameters for DeleteDevice.
type DeleteDeviceParams struct {
	// update name of device
	DeviceId string `form:"device_id" json:"device_id"`
}

// FindDeviceParams defines parameters for FindDevice.
type FindDeviceParams struct {
	// pass a device_id
	DeviceId *string `form:"device_id,omitempty" json:"device_id,omitempty"`

	// pass a device_name
	DeviceName *string `form:"device_name,omitempty" json:"device_name,omitempty"`
}

// UpdateDeviceJSONBody defines parameters for UpdateDevice.
type UpdateDeviceJSONBody = DeviceRequestPatch

// AddDeviceJSONBody defines parameters for AddDevice.
type AddDeviceJSONBody = DeviceRequestAdd

// GenKeyJSONBody defines parameters for GenKey.
type GenKeyJSONBody = DeviceRequestKeyGen

// AdminLoginJSONBody defines parameters for AdminLogin.
type AdminLoginJSONBody = AdminLoginRequest

// AdminRecoverJSONBody defines parameters for AdminRecover.
type AdminRecoverJSONBody = AdminRecoverRequest

// AdminRegisterJSONBody defines parameters for AdminRegister.
type AdminRegisterJSONBody = AdminLoginRequest

// DeleteTrackingParams defines parameters for DeleteTracking.
type DeleteTrackingParams struct {
	// device that holds tracking
	TrackingId string `form:"tracking_id" json:"tracking_id"`
}

// GetTrackingParams defines parameters for GetTracking.
type GetTrackingParams struct {
	// tracking number
	TrackingNumber string `form:"tracking_number" json:"tracking_number"`

	// device id that holds the tracking number
	DeviceId string `form:"device_id" json:"device_id"`
}

// AddTrackingJSONBody defines parameters for AddTracking.
type AddTrackingJSONBody = TrackingRequestItem

// ListTrackingsParams defines parameters for ListTrackings.
type ListTrackingsParams struct {
	// get all tracking numbers in a device
	DeviceId *string `form:"device_id,omitempty" json:"device_id,omitempty"`
}

// UpdateDeviceJSONRequestBody defines body for UpdateDevice for application/json ContentType.
type UpdateDeviceJSONRequestBody = UpdateDeviceJSONBody

// AddDeviceJSONRequestBody defines body for AddDevice for application/json ContentType.
type AddDeviceJSONRequestBody = AddDeviceJSONBody

// GenKeyJSONRequestBody defines body for GenKey for application/json ContentType.
type GenKeyJSONRequestBody = GenKeyJSONBody

// AdminLoginJSONRequestBody defines body for AdminLogin for application/json ContentType.
type AdminLoginJSONRequestBody = AdminLoginJSONBody

// AdminRecoverJSONRequestBody defines body for AdminRecover for application/json ContentType.
type AdminRecoverJSONRequestBody = AdminRecoverJSONBody

// AdminRegisterJSONRequestBody defines body for AdminRegister for application/json ContentType.
type AdminRegisterJSONRequestBody = AdminRegisterJSONBody

// AddTrackingJSONRequestBody defines body for AddTracking for application/json ContentType.
type AddTrackingJSONRequestBody = AddTrackingJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ClientValidate request
	ClientValidate(ctx context.Context, params *ClientValidateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDevice request
	DeleteDevice(ctx context.Context, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindDevice request
	FindDevice(ctx context.Context, params *FindDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDevice request with any body
	UpdateDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDevice(ctx context.Context, body UpdateDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDevice request with any body
	AddDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDevice(ctx context.Context, body AddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenKey request with any body
	GenKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenKey(ctx context.Context, body GenKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDevices request
	ListDevices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminLogin request with any body
	AdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminLogin(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminRecover request with any body
	AdminRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminRecover(ctx context.Context, body AdminRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminRegister request with any body
	AdminRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminRegister(ctx context.Context, body AdminRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTracking request
	DeleteTracking(ctx context.Context, params *DeleteTrackingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracking request
	GetTracking(ctx context.Context, params *GetTrackingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTracking request with any body
	AddTrackingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTracking(ctx context.Context, body AddTrackingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTrackings request
	ListTrackings(ctx context.Context, params *ListTrackingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ClientValidate(ctx context.Context, params *ClientValidateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientValidateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDevice(ctx context.Context, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindDevice(ctx context.Context, params *FindDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindDeviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDevice(ctx context.Context, body UpdateDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDevice(ctx context.Context, body AddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenKey(ctx context.Context, body GenKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDevices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDevicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminLogin(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRecoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRecover(ctx context.Context, body AdminRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRecoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRegister(ctx context.Context, body AdminRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTracking(ctx context.Context, params *DeleteTrackingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTrackingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracking(ctx context.Context, params *GetTrackingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTrackingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTrackingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTracking(ctx context.Context, body AddTrackingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTrackingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTrackings(ctx context.Context, params *ListTrackingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTrackingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewClientValidateRequest generates requests for ClientValidate
func NewClientValidateRequest(server string, params *ClientValidateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/client/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pinkey", runtime.ParamLocationQuery, params.Pinkey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDeviceRequest generates requests for DeleteDevice
func NewDeleteDeviceRequest(server string, params *DeleteDeviceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id", runtime.ParamLocationQuery, params.DeviceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindDeviceRequest generates requests for FindDevice
func NewFindDeviceRequest(server string, params *FindDeviceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DeviceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id", runtime.ParamLocationQuery, *params.DeviceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DeviceName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_name", runtime.ParamLocationQuery, *params.DeviceName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeviceRequest calls the generic UpdateDevice builder with application/json body
func NewUpdateDeviceRequest(server string, body UpdateDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDeviceRequestWithBody generates requests for UpdateDevice with any type of body
func NewUpdateDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddDeviceRequest calls the generic AddDevice builder with application/json body
func NewAddDeviceRequest(server string, body AddDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewAddDeviceRequestWithBody generates requests for AddDevice with any type of body
func NewAddDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenKeyRequest calls the generic GenKey builder with application/json body
func NewGenKeyRequest(server string, body GenKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewGenKeyRequestWithBody generates requests for GenKey with any type of body
func NewGenKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/device/generate-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDevicesRequest generates requests for ListDevices
func NewListDevicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/device/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminLoginRequest calls the generic AdminLogin builder with application/json body
func NewAdminLoginRequest(server string, body AdminLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminLoginRequestWithBody generates requests for AdminLogin with any type of body
func NewAdminLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/self-service/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminRecoverRequest calls the generic AdminRecover builder with application/json body
func NewAdminRecoverRequest(server string, body AdminRecoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminRecoverRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminRecoverRequestWithBody generates requests for AdminRecover with any type of body
func NewAdminRecoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/self-service/recover")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminRegisterRequest calls the generic AdminRegister builder with application/json body
func NewAdminRegisterRequest(server string, body AdminRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminRegisterRequestWithBody generates requests for AdminRegister with any type of body
func NewAdminRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/self-service/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTrackingRequest generates requests for DeleteTracking
func NewDeleteTrackingRequest(server string, params *DeleteTrackingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tracking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tracking_id", runtime.ParamLocationQuery, params.TrackingId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackingRequest generates requests for GetTracking
func NewGetTrackingRequest(server string, params *GetTrackingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tracking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tracking_number", runtime.ParamLocationQuery, params.TrackingNumber); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id", runtime.ParamLocationQuery, params.DeviceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTrackingRequest calls the generic AddTracking builder with application/json body
func NewAddTrackingRequest(server string, body AddTrackingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTrackingRequestWithBody(server, "application/json", bodyReader)
}

// NewAddTrackingRequestWithBody generates requests for AddTracking with any type of body
func NewAddTrackingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tracking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTrackingsRequest generates requests for ListTrackings
func NewListTrackingsRequest(server string, params *ListTrackingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tracking/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DeviceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id", runtime.ParamLocationQuery, *params.DeviceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ClientValidate request
	ClientValidateWithResponse(ctx context.Context, params *ClientValidateParams, reqEditors ...RequestEditorFn) (*ClientValidateResponse, error)

	// DeleteDevice request
	DeleteDeviceWithResponse(ctx context.Context, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*DeleteDeviceResponse, error)

	// FindDevice request
	FindDeviceWithResponse(ctx context.Context, params *FindDeviceParams, reqEditors ...RequestEditorFn) (*FindDeviceResponse, error)

	// UpdateDevice request with any body
	UpdateDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeviceResponse, error)

	UpdateDeviceWithResponse(ctx context.Context, body UpdateDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeviceResponse, error)

	// AddDevice request with any body
	AddDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDeviceResponse, error)

	AddDeviceWithResponse(ctx context.Context, body AddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDeviceResponse, error)

	// GenKey request with any body
	GenKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenKeyResponse, error)

	GenKeyWithResponse(ctx context.Context, body GenKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*GenKeyResponse, error)

	// ListDevices request
	ListDevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDevicesResponse, error)

	// AdminLogin request with any body
	AdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error)

	AdminLoginWithResponse(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error)

	// AdminRecover request with any body
	AdminRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminRecoverResponse, error)

	AdminRecoverWithResponse(ctx context.Context, body AdminRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminRecoverResponse, error)

	// AdminRegister request with any body
	AdminRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminRegisterResponse, error)

	AdminRegisterWithResponse(ctx context.Context, body AdminRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminRegisterResponse, error)

	// DeleteTracking request
	DeleteTrackingWithResponse(ctx context.Context, params *DeleteTrackingParams, reqEditors ...RequestEditorFn) (*DeleteTrackingResponse, error)

	// GetTracking request
	GetTrackingWithResponse(ctx context.Context, params *GetTrackingParams, reqEditors ...RequestEditorFn) (*GetTrackingResponse, error)

	// AddTracking request with any body
	AddTrackingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTrackingResponse, error)

	AddTrackingWithResponse(ctx context.Context, body AddTrackingJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTrackingResponse, error)

	// ListTrackings request
	ListTrackingsWithResponse(ctx context.Context, params *ListTrackingsParams, reqEditors ...RequestEditorFn) (*ListTrackingsResponse, error)
}

type ClientValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BoxeeClientValidateResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r ClientValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceCreatedResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeviceGetResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r FindDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceStandardResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeviceCreatedResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r AddDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeviceKeyGenResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r GenKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDevices
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r ListDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminLoginResponseItem
	JSON400      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r AdminLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminRecoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandardResponse
	JSON400      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r AdminRecoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRecoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminRegisterResponseItem
	JSON400      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r AdminRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTrackingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandardResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTrackingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTrackingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrackingGetResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTrackingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StandardResponse
	JSON400      *StandardResponse
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r AddTrackingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTrackingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTrackingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTrackings
	JSON401      *StandardResponse
}

// Status returns HTTPResponse.Status
func (r ListTrackingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTrackingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ClientValidateWithResponse request returning *ClientValidateResponse
func (c *ClientWithResponses) ClientValidateWithResponse(ctx context.Context, params *ClientValidateParams, reqEditors ...RequestEditorFn) (*ClientValidateResponse, error) {
	rsp, err := c.ClientValidate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientValidateResponse(rsp)
}

// DeleteDeviceWithResponse request returning *DeleteDeviceResponse
func (c *ClientWithResponses) DeleteDeviceWithResponse(ctx context.Context, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*DeleteDeviceResponse, error) {
	rsp, err := c.DeleteDevice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeviceResponse(rsp)
}

// FindDeviceWithResponse request returning *FindDeviceResponse
func (c *ClientWithResponses) FindDeviceWithResponse(ctx context.Context, params *FindDeviceParams, reqEditors ...RequestEditorFn) (*FindDeviceResponse, error) {
	rsp, err := c.FindDevice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindDeviceResponse(rsp)
}

// UpdateDeviceWithBodyWithResponse request with arbitrary body returning *UpdateDeviceResponse
func (c *ClientWithResponses) UpdateDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeviceResponse, error) {
	rsp, err := c.UpdateDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeviceResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeviceWithResponse(ctx context.Context, body UpdateDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeviceResponse, error) {
	rsp, err := c.UpdateDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeviceResponse(rsp)
}

// AddDeviceWithBodyWithResponse request with arbitrary body returning *AddDeviceResponse
func (c *ClientWithResponses) AddDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDeviceResponse, error) {
	rsp, err := c.AddDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDeviceResponse(rsp)
}

func (c *ClientWithResponses) AddDeviceWithResponse(ctx context.Context, body AddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDeviceResponse, error) {
	rsp, err := c.AddDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDeviceResponse(rsp)
}

// GenKeyWithBodyWithResponse request with arbitrary body returning *GenKeyResponse
func (c *ClientWithResponses) GenKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenKeyResponse, error) {
	rsp, err := c.GenKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenKeyResponse(rsp)
}

func (c *ClientWithResponses) GenKeyWithResponse(ctx context.Context, body GenKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*GenKeyResponse, error) {
	rsp, err := c.GenKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenKeyResponse(rsp)
}

// ListDevicesWithResponse request returning *ListDevicesResponse
func (c *ClientWithResponses) ListDevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDevicesResponse, error) {
	rsp, err := c.ListDevices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDevicesResponse(rsp)
}

// AdminLoginWithBodyWithResponse request with arbitrary body returning *AdminLoginResponse
func (c *ClientWithResponses) AdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error) {
	rsp, err := c.AdminLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminLoginResponse(rsp)
}

func (c *ClientWithResponses) AdminLoginWithResponse(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error) {
	rsp, err := c.AdminLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminLoginResponse(rsp)
}

// AdminRecoverWithBodyWithResponse request with arbitrary body returning *AdminRecoverResponse
func (c *ClientWithResponses) AdminRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminRecoverResponse, error) {
	rsp, err := c.AdminRecoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRecoverResponse(rsp)
}

func (c *ClientWithResponses) AdminRecoverWithResponse(ctx context.Context, body AdminRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminRecoverResponse, error) {
	rsp, err := c.AdminRecover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRecoverResponse(rsp)
}

// AdminRegisterWithBodyWithResponse request with arbitrary body returning *AdminRegisterResponse
func (c *ClientWithResponses) AdminRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminRegisterResponse, error) {
	rsp, err := c.AdminRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRegisterResponse(rsp)
}

func (c *ClientWithResponses) AdminRegisterWithResponse(ctx context.Context, body AdminRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminRegisterResponse, error) {
	rsp, err := c.AdminRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRegisterResponse(rsp)
}

// DeleteTrackingWithResponse request returning *DeleteTrackingResponse
func (c *ClientWithResponses) DeleteTrackingWithResponse(ctx context.Context, params *DeleteTrackingParams, reqEditors ...RequestEditorFn) (*DeleteTrackingResponse, error) {
	rsp, err := c.DeleteTracking(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTrackingResponse(rsp)
}

// GetTrackingWithResponse request returning *GetTrackingResponse
func (c *ClientWithResponses) GetTrackingWithResponse(ctx context.Context, params *GetTrackingParams, reqEditors ...RequestEditorFn) (*GetTrackingResponse, error) {
	rsp, err := c.GetTracking(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackingResponse(rsp)
}

// AddTrackingWithBodyWithResponse request with arbitrary body returning *AddTrackingResponse
func (c *ClientWithResponses) AddTrackingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTrackingResponse, error) {
	rsp, err := c.AddTrackingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTrackingResponse(rsp)
}

func (c *ClientWithResponses) AddTrackingWithResponse(ctx context.Context, body AddTrackingJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTrackingResponse, error) {
	rsp, err := c.AddTracking(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTrackingResponse(rsp)
}

// ListTrackingsWithResponse request returning *ListTrackingsResponse
func (c *ClientWithResponses) ListTrackingsWithResponse(ctx context.Context, params *ListTrackingsParams, reqEditors ...RequestEditorFn) (*ListTrackingsResponse, error) {
	rsp, err := c.ListTrackings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTrackingsResponse(rsp)
}

// ParseClientValidateResponse parses an HTTP response from a ClientValidateWithResponse call
func ParseClientValidateResponse(rsp *http.Response) (*ClientValidateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BoxeeClientValidateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteDeviceResponse parses an HTTP response from a DeleteDeviceWithResponse call
func ParseDeleteDeviceResponse(rsp *http.Response) (*DeleteDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFindDeviceResponse parses an HTTP response from a FindDeviceWithResponse call
func ParseFindDeviceResponse(rsp *http.Response) (*FindDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeviceGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateDeviceResponse parses an HTTP response from a UpdateDeviceWithResponse call
func ParseUpdateDeviceResponse(rsp *http.Response) (*UpdateDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceStandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAddDeviceResponse parses an HTTP response from a AddDeviceWithResponse call
func ParseAddDeviceResponse(rsp *http.Response) (*AddDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeviceCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGenKeyResponse parses an HTTP response from a GenKeyWithResponse call
func ParseGenKeyResponse(rsp *http.Response) (*GenKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeviceKeyGenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseListDevicesResponse parses an HTTP response from a ListDevicesWithResponse call
func ParseListDevicesResponse(rsp *http.Response) (*ListDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDevices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAdminLoginResponse parses an HTTP response from a AdminLoginWithResponse call
func ParseAdminLoginResponse(rsp *http.Response) (*AdminLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminLoginResponseItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAdminRecoverResponse parses an HTTP response from a AdminRecoverWithResponse call
func ParseAdminRecoverResponse(rsp *http.Response) (*AdminRecoverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminRecoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAdminRegisterResponse parses an HTTP response from a AdminRegisterWithResponse call
func ParseAdminRegisterResponse(rsp *http.Response) (*AdminRegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminRegisterResponseItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteTrackingResponse parses an HTTP response from a DeleteTrackingWithResponse call
func ParseDeleteTrackingResponse(rsp *http.Response) (*DeleteTrackingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTrackingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetTrackingResponse parses an HTTP response from a GetTrackingWithResponse call
func ParseGetTrackingResponse(rsp *http.Response) (*GetTrackingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackingGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAddTrackingResponse parses an HTTP response from a AddTrackingWithResponse call
func ParseAddTrackingResponse(rsp *http.Response) (*AddTrackingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTrackingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseListTrackingsResponse parses an HTTP response from a ListTrackingsWithResponse call
func ParseListTrackingsResponse(rsp *http.Response) (*ListTrackingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTrackingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTrackings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
